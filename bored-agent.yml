apiVersion: v1
kind: Namespace
metadata:
  name: lens-platform
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bored-agent
  namespace: lens-platform
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: bored-agent-secret
  namespace: lens-platform
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["bored-agent-cert"]
  verbs: ["get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bored-agent-impersonate
rules:
- apiGroups: [""]
  resources: ["users", "groups"]
  verbs: ["impersonate"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bored-agent
  namespace: lens-platform
subjects:
- kind: ServiceAccount
  name: bored-agent
  namespace: lens-platform
roleRef:
  kind: Role
  name: bored-agent-secret
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bored-agent-impersonate
subjects:
- kind: ServiceAccount
  name: bored-agent
  namespace: lens-platform
roleRef:
  kind: ClusterRole
  name: bored-agent-impersonate
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: lens-bored-agent
preemptionPolicy: PreemptLowerPriority
value: 999999000
# cluster-critical is 2000000000 and node-critical 2000001000. 1000000000 is max
---
apiVersion: v1
kind: Secret
metadata:
  name: bored-agent-cert
  namespace: lens-platform
  labels:
    app: bored-agent
data:
  public: ""
  private: ""
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lens-spaces-view
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - '*'
    resources:
      - '*'
  - apiGroups:
      - ''
    resources:
      - services/proxy
      - services/portforward
    verbs:
      - get
      - list
      - create
  - apiGroups:
      - ''
    resources:
      - pods/portforward
    verbs:
      - get
      - list
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lens-cluster-admin
rules:
  - verbs:
      - '*'
    apiGroups:
      - '*'
    resources:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lens-platform-read-teams
subjects:
- kind: Group
  name: lens-spaces:Member
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: lens-spaces-view
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lens-platform-write-teams
subjects:
- kind: Group
  name: lens-spaces:Admin
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: lens-spaces:Owner
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: lens-cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: lens-platform-cluster
  namespace: lens-platform
data:
  lensPlatformK8sclusterId: $LENS_PLATFORM_K8S_CLUSTER_ID
  lensPlatformSpaceName: $LENS_PLATFORM_SPACE_NAME
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bored-agent-updater
  namespace: lens-platform
spec:
  schedule: "@hourly"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: bored-agent-updater
          containers:
          - name: bored-agent-updater
            image: quay.io/k8slens/bored-agent:0.10.0
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: BORED_SERVER
              value: $BORED_SERVER
            - name: BORED_TOKEN
              value: $BORED_TOKEN
            - name: LENS_PLATFORM_K8S_CLUSTER_ID
              value: $LENS_PLATFORM_K8S_CLUSTER_ID
            - name: LENS_PLATFORM_SPACE_NAME
              value: $LENS_PLATFORM_SPACE_NAME
            - name: LENS_BACKEND_URL
              value: $LENS_BACKEND_URL
            - name: AUTO_UPDATE_URL
              value: $AUTO_UPDATE_URL
            command:
            - node
            - dist/src/updater.js
          restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bored-agent-updater
  namespace: lens-platform
---
apiVersion: 'rbac.authorization.k8s.io/v1'
kind: 'ClusterRole'
metadata:
  name: 'bored-agent-updater'
rules:
  - verbs:
      - '*'
    apiGroups:
      - '*'
    resources:
      - namespaces
      - serviceaccounts
      - roles
      - clusterroles
      - rolebindings
      - clusterrolebindings
      - priorityclasses
---
apiVersion: 'rbac.authorization.k8s.io/v1'
kind: 'Role'
metadata:
  name: 'bored-agent-updater'
  namespace: lens-platform
rules:
  - verbs:
      - '*'
    apiGroups:
      - '*'
    resources:
      - deployments
      - cronjobs
      - configmaps
      - secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bored-agent-updater
subjects:
- kind: ServiceAccount
  name: bored-agent-updater
  namespace: lens-platform
roleRef:
  kind: ClusterRole
  name: bored-agent-updater
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bored-agent-updater
  namespace: lens-platform
subjects:
- kind: ServiceAccount
  name: bored-agent-updater
  namespace: lens-platform
roleRef:
  kind: Role
  name: bored-agent-updater
  apiGroup: rbac.authorization.k8s.io
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: bored-agent
  namespace: lens-platform
  labels:
    app: bored-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bored-agent
  template:
    metadata:
      labels:
        app: bored-agent
    spec:
      priorityClassName: "lens-bored-agent"
      serviceAccountName: bored-agent
      containers:
      - name: agent
        image: quay.io/k8slens/bored-agent:0.10.0
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BORED_SERVER
          value: $BORED_SERVER
        - name: BORED_TOKEN
          value: $BORED_TOKEN
---
